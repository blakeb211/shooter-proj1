	.\level_editor\level_editor_session.vim	/^inoremap  u$/;"	m
	.\proto1_session.vim	/^inoremap  u$/;"	m
	.\level_editor\level_editor_session.vim	/^vmap  "*d$/;"	m
	.\proto1_session.vim	/^vmap  "*d$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
%	.\level_editor\level_editor_session.vim	/^nmap <silent> % <Plug>(MatchitNormalForward)$/;"	m
%	.\level_editor\level_editor_session.vim	/^omap <silent> % <Plug>(MatchitOperationForward)$/;"	m
%	.\proto1_session.vim	/^nmap <silent> % <Plug>(MatchitNormalForward)$/;"	m
%	.\proto1_session.vim	/^omap <silent> % <Plug>(MatchitOperationForward)$/;"	m
0	.\level_editor\level_editor_session.vim	/^normal! 0$/;"	m
0	.\proto1_session.vim	/^normal! 0$/;"	m
017|	.\proto1_session.vim	/^normal! 017|$/;"	m
038|	.\level_editor\level_editor_session.vim	/^normal! 038|$/;"	m
047|	.\proto1_session.vim	/^normal! 047|$/;"	m
<C-Del>	.\level_editor\level_editor_session.vim	/^vmap <C-Del> "*d$/;"	m
<C-Del>	.\proto1_session.vim	/^vmap <C-Del> "*d$/;"	m
<C-Insert>	.\level_editor\level_editor_session.vim	/^vmap <C-Insert> "*y$/;"	m
<C-Insert>	.\proto1_session.vim	/^vmap <C-Insert> "*y$/;"	m
<C-U>	.\level_editor\level_editor_session.vim	/^inoremap <C-U> u$/;"	m
<C-U>	.\proto1_session.vim	/^inoremap <C-U> u$/;"	m
<C-X>	.\level_editor\level_editor_session.vim	/^vmap <C-X> "*d$/;"	m
<C-X>	.\proto1_session.vim	/^vmap <C-X> "*d$/;"	m
<F10>	.\level_editor\level_editor_session.vim	/^map <F10> :!%.exe$/;"	m
<F10>	.\proto1_session.vim	/^map <F10> :!%.exe$/;"	m
<F2>	.\level_editor\level_editor_session.vim	/^map <F2> :source $VIM\\_vimrc$/;"	m
<F2>	.\proto1_session.vim	/^map <F2> :source $VIM\\_vimrc$/;"	m
<F3>	.\level_editor\level_editor_session.vim	/^map <F3> :e $VIM\\_vimrc$/;"	m
<F3>	.\proto1_session.vim	/^map <F3> :e $VIM\\_vimrc$/;"	m
<F4>	.\level_editor\level_editor_session.vim	/^map <F4> :cd c:\\code$/;"	m
<F4>	.\proto1_session.vim	/^map <F4> :cd c:\\code$/;"	m
<F9>	.\level_editor\level_editor_session.vim	/^map <F9> :source %:p:h\\compile.vim$/;"	m
<F9>	.\proto1_session.vim	/^map <F9> :source %:p:h\\compile.vim$/;"	m
<Plug>(MatchitNormalBackward)	.\level_editor\level_editor_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalBackward) :call matchit#Match_wrapper('',0,'n')$/;"	m
<Plug>(MatchitNormalBackward)	.\proto1_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalBackward) :call matchit#Match_wrapper('',0,'n')$/;"	m
<Plug>(MatchitNormalForward)	.\level_editor\level_editor_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalForward) :call matchit#Match_wrapper('',1,'n')$/;"	m
<Plug>(MatchitNormalForward)	.\proto1_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalForward) :call matchit#Match_wrapper('',1,'n')$/;"	m
<Plug>(MatchitNormalMultiBackward)	.\level_editor\level_editor_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalMultiBackward) :call matchit#MultiMatch("bW", "n")$/;"	m
<Plug>(MatchitNormalMultiBackward)	.\proto1_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalMultiBackward) :call matchit#MultiMatch("bW", "n")$/;"	m
<Plug>(MatchitNormalMultiForward)	.\level_editor\level_editor_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalMultiForward) :call matchit#MultiMatch("W",  "n")$/;"	m
<Plug>(MatchitNormalMultiForward)	.\proto1_session.vim	/^nnoremap <silent> <Plug>(MatchitNormalMultiForward) :call matchit#MultiMatch("W",  "n")$/;"	m
<Plug>(MatchitOperationBackward)	.\level_editor\level_editor_session.vim	/^onoremap <silent> <Plug>(MatchitOperationBackward) :call matchit#Match_wrapper('',0,'o')$/;"	m
<Plug>(MatchitOperationBackward)	.\proto1_session.vim	/^onoremap <silent> <Plug>(MatchitOperationBackward) :call matchit#Match_wrapper('',0,'o')$/;"	m
<Plug>(MatchitOperationForward)	.\level_editor\level_editor_session.vim	/^onoremap <silent> <Plug>(MatchitOperationForward) :call matchit#Match_wrapper('',1,'o')$/;"	m
<Plug>(MatchitOperationForward)	.\proto1_session.vim	/^onoremap <silent> <Plug>(MatchitOperationForward) :call matchit#Match_wrapper('',1,'o')$/;"	m
<Plug>(MatchitOperationMultiBackward)	.\level_editor\level_editor_session.vim	/^onoremap <silent> <Plug>(MatchitOperationMultiBackward) :call matchit#MultiMatch("bW", "o")$/;"	m
<Plug>(MatchitOperationMultiBackward)	.\proto1_session.vim	/^onoremap <silent> <Plug>(MatchitOperationMultiBackward) :call matchit#MultiMatch("bW", "o")$/;"	m
<Plug>(MatchitOperationMultiForward)	.\level_editor\level_editor_session.vim	/^onoremap <silent> <Plug>(MatchitOperationMultiForward) :call matchit#MultiMatch("W",  "o")$/;"	m
<Plug>(MatchitOperationMultiForward)	.\proto1_session.vim	/^onoremap <silent> <Plug>(MatchitOperationMultiForward) :call matchit#MultiMatch("W",  "o")$/;"	m
<Plug>NetrwBrowseX	.\level_editor\level_editor_session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))$/;"	m
<Plug>NetrwBrowseX	.\proto1_session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))$/;"	m
<Plug>NetrwBrowseXVis	.\level_editor\level_editor_session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<Plug>NetrwBrowseXVis	.\proto1_session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<S-Del>	.\level_editor\level_editor_session.vim	/^vmap <S-Del> "*d$/;"	m
<S-Del>	.\proto1_session.vim	/^vmap <S-Del> "*d$/;"	m
<S-Insert>	.\level_editor\level_editor_session.vim	/^map! <S-Insert> *$/;"	m
<S-Insert>	.\level_editor\level_editor_session.vim	/^nmap <S-Insert> "*P$/;"	m
<S-Insert>	.\level_editor\level_editor_session.vim	/^vmap <S-Insert> "-d"*P$/;"	m
<S-Insert>	.\proto1_session.vim	/^map! <S-Insert> *$/;"	m
<S-Insert>	.\proto1_session.vim	/^nmap <S-Insert> "*P$/;"	m
<S-Insert>	.\proto1_session.vim	/^vmap <S-Insert> "-d"*P$/;"	m
AudioThread	.\level_editor\olcConsoleGameEngine.h	/^		void AudioThread()$/;"	f	class:olcConsoleGameEngine
B1	.\entity.cpp	/^B1::B1(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) {$/;"	f	class:B1
B1	.\entity.h	/^struct B1 : Bullet {$/;"	s	struct:EntityType
B2	.\entity.cpp	/^B2::B2(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) {$/;"	f	class:B2
B2	.\entity.h	/^struct B2 : Bullet {$/;"	s	struct:EntityType
B3	.\entity.cpp	/^B3::B3(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) {$/;"	f	class:B3
B3	.\entity.h	/^struct B3 : Bullet {$/;"	s	struct:EntityType
BG_BLACK	.\level_editor\olcConsoleGameEngine.h	/^	BG_BLACK = 0x0000,$/;"	e	enum:COLOUR
BG_BLUE	.\level_editor\olcConsoleGameEngine.h	/^	BG_BLUE = 0x0090,$/;"	e	enum:COLOUR
BG_CYAN	.\level_editor\olcConsoleGameEngine.h	/^	BG_CYAN = 0x00B0,$/;"	e	enum:COLOUR
BG_DARK_BLUE	.\level_editor\olcConsoleGameEngine.h	/^	BG_DARK_BLUE = 0x0010,$/;"	e	enum:COLOUR
BG_DARK_CYAN	.\level_editor\olcConsoleGameEngine.h	/^	BG_DARK_CYAN = 0x0030,$/;"	e	enum:COLOUR
BG_DARK_GREEN	.\level_editor\olcConsoleGameEngine.h	/^	BG_DARK_GREEN = 0x0020,$/;"	e	enum:COLOUR
BG_DARK_GREY	.\level_editor\olcConsoleGameEngine.h	/^	BG_DARK_GREY = 0x0080,$/;"	e	enum:COLOUR
BG_DARK_MAGENTA	.\level_editor\olcConsoleGameEngine.h	/^	BG_DARK_MAGENTA = 0x0050,$/;"	e	enum:COLOUR
BG_DARK_RED	.\level_editor\olcConsoleGameEngine.h	/^	BG_DARK_RED = 0x0040,$/;"	e	enum:COLOUR
BG_DARK_YELLOW	.\level_editor\olcConsoleGameEngine.h	/^	BG_DARK_YELLOW = 0x0060,$/;"	e	enum:COLOUR
BG_GREEN	.\level_editor\olcConsoleGameEngine.h	/^	BG_GREEN = 0x00A0,$/;"	e	enum:COLOUR
BG_GREY	.\level_editor\olcConsoleGameEngine.h	/^	BG_GREY = 0x0070,$/;"	e	enum:COLOUR
BG_MAGENTA	.\level_editor\olcConsoleGameEngine.h	/^	BG_MAGENTA = 0x00D0,$/;"	e	enum:COLOUR
BG_RED	.\level_editor\olcConsoleGameEngine.h	/^	BG_RED = 0x00C0,$/;"	e	enum:COLOUR
BG_WHITE	.\level_editor\olcConsoleGameEngine.h	/^	BG_WHITE = 0x00F0,$/;"	e	enum:COLOUR
BG_YELLOW	.\level_editor\olcConsoleGameEngine.h	/^	BG_YELLOW = 0x00E0,$/;"	e	enum:COLOUR
Builder	.\builder.h	/^namespace Builder {$/;"	n
Bullet	.\entity.cpp	/^Bullet::Bullet(Vec2 vv) : vel{vv} {$/;"	f	class:Bullet
Bullet	.\entity.h	/^enum struct EntityType { Player = 1, Bullet = 2, Wall1 = 3, Wall2 = 4, Enemy = 5 };$/;"	m	struct:EntityType
Bullet	.\entity.h	/^struct Bullet : Entity { $/;"	s	struct:EntityType
COLOUR	.\level_editor\olcConsoleGameEngine.h	/^enum COLOUR$/;"	g
CalcDistance	.\level_editor\level_editor_main.cpp	/^    float CalcDistance(pair<float, float> p1, pair<float, float> p2) {$/;"	f	class:Example
CheckCollisionsForThisFrame	.\collision_manager.cpp	/^void CollisionManager::CheckCollisionsForThisFrame() {$/;"	f	class:CollisionManager
Clip	.\level_editor\olcConsoleGameEngine.h	/^	void Clip(int &x, int &y)$/;"	f	class:olcConsoleGameEngine
CollisionManager	.\collision_manager.cpp	/^CollisionManager::CollisionManager() { cout << "Initializing Collision Manager" << endl; }$/;"	f	class:CollisionManager
CollisionManager	.\collision_manager.h	/^struct CollisionManager {$/;"	s
ConstructConsole	.\level_editor\olcConsoleGameEngine.h	/^	int ConstructConsole(int width, int height, int fontw, int fonth)$/;"	f	class:olcConsoleGameEngine
ConstructWindow	.\level_editor\olcConsoleGameEngine.h	/^	HWND ConstructWindow(int width, int height)$/;"	f	class:olcConsoleGameEngine
Create	.\level_editor\olcConsoleGameEngine.h	/^	void Create(int w, int h)$/;"	f	class:olcSprite
CreateAudio	.\level_editor\olcConsoleGameEngine.h	/^		bool CreateAudio(unsigned int nSampleRate = 44100, unsigned int nChannels = 1,$/;"	f	class:olcConsoleGameEngine
DestroyAudio	.\level_editor\olcConsoleGameEngine.h	/^		bool DestroyAudio()$/;"	f	class:olcConsoleGameEngine
Draw	.\level_editor\olcConsoleGameEngine.h	/^	virtual void Draw(int x, int y, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawCircle	.\level_editor\olcConsoleGameEngine.h	/^	void DrawCircle(int xc, int yc, int r, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawLine	.\level_editor\olcConsoleGameEngine.h	/^	void DrawLine(int x1, int y1, int x2, int y2, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawPartialSprite	.\level_editor\olcConsoleGameEngine.h	/^	void DrawPartialSprite(int x, int y, olcSprite *sprite, int ox, int oy, int w, int h)$/;"	f	class:olcConsoleGameEngine
DrawSprite	.\level_editor\olcConsoleGameEngine.h	/^	void DrawSprite(int x, int y, olcSprite *sprite)$/;"	f	class:olcConsoleGameEngine
DrawString	.\level_editor\olcConsoleGameEngine.h	/^	void DrawString(int x, int y, wstring c, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawStringAlpha	.\level_editor\olcConsoleGameEngine.h	/^	void DrawStringAlpha(int x, int y, wstring c, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawTriangle	.\level_editor\olcConsoleGameEngine.h	/^	void DrawTriangle(int x1, int y1, int x2, int y2, int x3, int y3, short c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawWireFrameModel	.\level_editor\olcConsoleGameEngine.h	/^	void DrawWireFrameModel(const std::vector<std::pair<float, float>> &vecModelCoordinates, float x, float y, float r = 0.0f, float s = 1.0f, short col = FG_WHITE, short c = PIXEL_SOLID)$/;"	f	class:olcConsoleGameEngine
E1	.\entity.cpp	/^E1::E1(Vec2 pos) : Enemy() {$/;"	f	class:E1
E1	.\entity.h	/^struct E1: Enemy {$/;"	s	struct:EntityType
E2	.\entity.cpp	/^E2::E2(Vec2 pos) : Enemy() {$/;"	f	class:E2
E2	.\entity.h	/^struct E2: Enemy {$/;"	s	struct:EntityType
E3	.\entity.cpp	/^E3::E3(Vec2 pos) : Enemy() {$/;"	f	class:E3
E3	.\entity.h	/^struct E3: Enemy {$/;"	s	struct:EntityType
E4	.\entity.cpp	/^E4::E4(Vec2 pos) : Enemy() {$/;"	f	class:E4
E4	.\entity.h	/^struct E4: Enemy {$/;"	s	struct:EntityType
EnableSound	.\level_editor\olcConsoleGameEngine.h	/^	void EnableSound()$/;"	f	class:olcConsoleGameEngine
Enemy	.\entity.cpp	/^Enemy::Enemy() : currPathPoint{0} {$/;"	f	class:Enemy
Enemy	.\entity.h	/^enum struct EntityType { Player = 1, Bullet = 2, Wall1 = 3, Wall2 = 4, Enemy = 5 };$/;"	m	struct:EntityType
Enemy	.\entity.h	/^struct Enemy: Entity { \/\/ base$/;"	s	struct:EntityType
Entity	.\entity.cpp	/^Entity::Entity() : id{entityCount++}, destroyed{false}, hasDeadVoxel{false} {}$/;"	f	class:Entity
Entity	.\entity.h	/^struct Entity {$/;"	s	struct:EntityType
EntityType	.\entity.h	/^enum struct EntityType { Player = 1, Bullet = 2, Wall1 = 3, Wall2 = 4, Enemy = 5 };$/;"	s
Error	.\level_editor\olcConsoleGameEngine.h	/^	int Error(const wchar_t *msg)$/;"	f	class:olcConsoleGameEngine
Example	.\level_editor\level_editor_main.cpp	/^    Example()$/;"	f	class:Example
Example	.\level_editor\level_editor_main.cpp	/^class Example : public olcConsoleGameEngine$/;"	c	file:
FG_BLACK	.\level_editor\olcConsoleGameEngine.h	/^	FG_BLACK = 0x0000,$/;"	e	enum:COLOUR
FG_BLUE	.\level_editor\olcConsoleGameEngine.h	/^	FG_BLUE = 0x0009,$/;"	e	enum:COLOUR
FG_CYAN	.\level_editor\olcConsoleGameEngine.h	/^	FG_CYAN = 0x000B,$/;"	e	enum:COLOUR
FG_DARK_BLUE	.\level_editor\olcConsoleGameEngine.h	/^	FG_DARK_BLUE = 0x0001,$/;"	e	enum:COLOUR
FG_DARK_CYAN	.\level_editor\olcConsoleGameEngine.h	/^	FG_DARK_CYAN = 0x0003,$/;"	e	enum:COLOUR
FG_DARK_GREEN	.\level_editor\olcConsoleGameEngine.h	/^	FG_DARK_GREEN = 0x0002,$/;"	e	enum:COLOUR
FG_DARK_GREY	.\level_editor\olcConsoleGameEngine.h	/^	FG_DARK_GREY = 0x0008,$/;"	e	enum:COLOUR
FG_DARK_MAGENTA	.\level_editor\olcConsoleGameEngine.h	/^	FG_DARK_MAGENTA = 0x0005,$/;"	e	enum:COLOUR
FG_DARK_RED	.\level_editor\olcConsoleGameEngine.h	/^	FG_DARK_RED = 0x0004,$/;"	e	enum:COLOUR
FG_DARK_YELLOW	.\level_editor\olcConsoleGameEngine.h	/^	FG_DARK_YELLOW = 0x0006,$/;"	e	enum:COLOUR
FG_GREEN	.\level_editor\olcConsoleGameEngine.h	/^	FG_GREEN = 0x000A,$/;"	e	enum:COLOUR
FG_GREY	.\level_editor\olcConsoleGameEngine.h	/^	FG_GREY = 0x0007, \/\/ Thanks MS :-\/$/;"	e	enum:COLOUR
FG_MAGENTA	.\level_editor\olcConsoleGameEngine.h	/^	FG_MAGENTA = 0x000D,$/;"	e	enum:COLOUR
FG_RED	.\level_editor\olcConsoleGameEngine.h	/^	FG_RED = 0x000C,$/;"	e	enum:COLOUR
FG_WHITE	.\level_editor\olcConsoleGameEngine.h	/^	FG_WHITE = 0x000F,$/;"	e	enum:COLOUR
FG_YELLOW	.\level_editor\olcConsoleGameEngine.h	/^	FG_YELLOW = 0x000E,$/;"	e	enum:COLOUR
FUV	.\level_editor\olcConsoleGameEngine.h	277;"	d
Fill	.\level_editor\olcConsoleGameEngine.h	/^	void Fill(int x1, int y1, int x2, int y2, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
FillCircle	.\level_editor\olcConsoleGameEngine.h	/^	void FillCircle(int xc, int yc, int r, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
FillTriangle	.\level_editor\olcConsoleGameEngine.h	/^	void FillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, short c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
G	.\globals.h	/^namespace G {$/;"	n
GL_GENERATE_MIPMAP	.\level_editor\olcConsoleGameEngine.h	131;"	d
GL_GENERATE_MIPMAP_HINT	.\level_editor\olcConsoleGameEngine.h	132;"	d
Game	.\proto1.cpp	/^    Game() {$/;"	f	struct:Game
Game	.\proto1.cpp	/^struct Game {$/;"	s	file:
GameThread	.\level_editor\olcConsoleGameEngine.h	/^	void GameThread()$/;"	f	class:olcConsoleGameEngine
GenerateMipmapPow2	.\level_editor\olcConsoleGameEngine.h	/^	void GenerateMipmapPow2(uint8_t *tex_new, uint8_t *tex_old, uint8_t *ref_alpha, int size)$/;"	f	class:olcConsoleGameEngine
GetColour	.\level_editor\olcConsoleGameEngine.h	/^	short GetColour(int x, int y)$/;"	f	class:olcSprite
GetFontCoords	.\level_editor\olcConsoleGameEngine.h	/^void GetFontCoords(int id, int *x, int *y) {$/;"	f
GetGlyph	.\level_editor\olcConsoleGameEngine.h	/^	wchar_t GetGlyph(int x, int y)$/;"	f	class:olcSprite
GetKey	.\level_editor\olcConsoleGameEngine.h	/^	sKeyState GetKey(int nKeyID) { return m_keys[nKeyID]; }$/;"	f	class:olcConsoleGameEngine
GetMixerOutput	.\level_editor\olcConsoleGameEngine.h	/^		float GetMixerOutput(int nChannel, float fGlobalTime, float fTimeStep)$/;"	f	class:olcConsoleGameEngine
GetMouse	.\level_editor\olcConsoleGameEngine.h	/^	sKeyState GetMouse(int nMouseButtonID) { return m_mouse[nMouseButtonID]; }$/;"	f	class:olcConsoleGameEngine
GetMouseX	.\level_editor\olcConsoleGameEngine.h	/^	int GetMouseX() { return m_mousePosX; }$/;"	f	class:olcConsoleGameEngine
GetMouseY	.\level_editor\olcConsoleGameEngine.h	/^	int GetMouseY() { return m_mousePosY; }$/;"	f	class:olcConsoleGameEngine
IsFocused	.\level_editor\olcConsoleGameEngine.h	/^	bool IsFocused() { return m_bConsoleInFocus; }$/;"	f	class:olcConsoleGameEngine
Load	.\level_editor\olcConsoleGameEngine.h	/^	bool Load(wstring sFile)$/;"	f	class:olcSprite
LoadAudioSample	.\level_editor\olcConsoleGameEngine.h	/^		unsigned int LoadAudioSample(std::wstring sWavFile)$/;"	f	class:olcConsoleGameEngine
OLC_PGE_APPLICATION	.\level_editor\level_editor_main.cpp	1;"	d	file:
OnUserDestroy	.\level_editor\olcConsoleGameEngine.h	/^	virtual bool OnUserDestroy()$/;"	f	class:olcConsoleGameEngine
PIXEL_HALF	.\level_editor\olcConsoleGameEngine.h	/^	PIXEL_HALF = 0x2592,$/;"	e	enum:PIXEL_TYPE
PIXEL_QUARTER	.\level_editor\olcConsoleGameEngine.h	/^	PIXEL_QUARTER = 0x2591,$/;"	e	enum:PIXEL_TYPE
PIXEL_SOLID	.\level_editor\olcConsoleGameEngine.h	/^	PIXEL_SOLID = 0x2588,$/;"	e	enum:PIXEL_TYPE
PIXEL_THREEQUARTERS	.\level_editor\olcConsoleGameEngine.h	/^	PIXEL_THREEQUARTERS = 0x2593,$/;"	e	enum:PIXEL_TYPE
PIXEL_TYPE	.\level_editor\olcConsoleGameEngine.h	/^enum PIXEL_TYPE$/;"	g
PlaySample	.\level_editor\olcConsoleGameEngine.h	/^		void PlaySample(int id, bool bLoop = false)$/;"	f	class:olcConsoleGameEngine
Player	.\entity.cpp	/^Player::Player(Vec2 pos) : mTimerMax{100.f}, mTimer{0.f}, mCanShoot{false}  {$/;"	f	class:Player
Player	.\entity.h	/^enum struct EntityType { Player = 1, Bullet = 2, Wall1 = 3, Wall2 = 4, Enemy = 5 };$/;"	m	struct:EntityType
Player	.\entity.h	/^struct Player : public Entity {$/;"	s	struct:EntityType
Q	.\level_editor\level_editor_session.vim	/^map Q gq$/;"	m
Q	.\proto1_session.vim	/^map Q gq$/;"	m
Run	.\proto1.cpp	/^    void Run() {$/;"	f	struct:Game
SampleColour	.\level_editor\olcConsoleGameEngine.h	/^	short SampleColour(float x, float y)$/;"	f	class:olcSprite
SampleGlyph	.\level_editor\olcConsoleGameEngine.h	/^	wchar_t SampleGlyph(float x, float y)$/;"	f	class:olcSprite
Save	.\level_editor\olcConsoleGameEngine.h	/^	bool Save(wstring sFile)$/;"	f	class:olcSprite
ScreenHeight	.\level_editor\olcConsoleGameEngine.h	/^	int ScreenHeight()$/;"	f	class:olcConsoleGameEngine
ScreenWidth	.\level_editor\olcConsoleGameEngine.h	/^	int ScreenWidth()$/;"	f	class:olcConsoleGameEngine
SessionLoad	.\level_editor\level_editor_session.vim	/^let SessionLoad = 1$/;"	v
SessionLoad	.\proto1_session.vim	/^let SessionLoad = 1$/;"	v
SetColour	.\level_editor\olcConsoleGameEngine.h	/^	void SetColour(int x, int y, short c)$/;"	f	class:olcSprite
SetGlyph	.\level_editor\olcConsoleGameEngine.h	/^	void SetGlyph(int x, int y, wchar_t c)$/;"	f	class:olcSprite
SetPixelFormatGL	.\level_editor\olcConsoleGameEngine.h	/^	int SetPixelFormatGL(void)$/;"	f	class:olcConsoleGameEngine
Start	.\level_editor\olcConsoleGameEngine.h	/^	void Start()$/;"	f	class:olcConsoleGameEngine
StopSample	.\level_editor\olcConsoleGameEngine.h	/^		void StopSample(int id)$/;"	f	class:olcConsoleGameEngine
ToggleFullscreen	.\level_editor\olcConsoleGameEngine.h	/^	void ToggleFullscreen(HWND hWnd)$/;"	f	class:olcConsoleGameEngine
UNICODE	.\level_editor\olcConsoleGameEngine.h	112;"	d
UpdateMousePosition	.\level_editor\olcConsoleGameEngine.h	/^	void UpdateMousePosition(int x, int y)$/;"	f	class:olcConsoleGameEngine
Voxel	.\voxel.cpp	/^Voxel::Voxel(float mX, float mY, Color c) {$/;"	f	class:Voxel
Voxel	.\voxel.h	/^struct Voxel : sf::RectangleShape { $/;"	s
Wall	.\entity.h	/^struct Wall : Entity { \/\/ base$/;"	s	struct:EntityType
Wall	.\level_editor\level_editor_main.cpp	/^struct Wall {$/;"	s	file:
Wall1	.\entity.cpp	/^Wall1::Wall1(Vec2 start, Vec2 end) {$/;"	f	class:Wall1
Wall1	.\entity.h	/^enum struct EntityType { Player = 1, Bullet = 2, Wall1 = 3, Wall2 = 4, Enemy = 5 };$/;"	m	struct:EntityType
Wall1	.\entity.h	/^struct Wall1 : Wall { \/\/ bouncy wall $/;"	s	struct:EntityType
Wall2	.\entity.h	/^enum struct EntityType { Player = 1, Bullet = 2, Wall1 = 3, Wall2 = 4, Enemy = 5 };$/;"	m	struct:EntityType
Wall2	.\entity.h	/^struct Wall2 : Wall { \/\/ destructible wall$/;"	s	struct:EntityType
WindowResize	.\level_editor\olcConsoleGameEngine.h	/^	void WindowResize(void)$/;"	f	class:olcConsoleGameEngine
WindowUpdateScale	.\level_editor\olcConsoleGameEngine.h	/^	void WindowUpdateScale(void)$/;"	f	class:olcConsoleGameEngine
["	.\level_editor\level_editor_session.vim	/^nnoremap <buffer> <silent> [" :call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")$/;"	m
["	.\level_editor\level_editor_session.vim	/^vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")$/;"	m
[%	.\level_editor\level_editor_session.vim	/^nmap <silent> [% <Plug>(MatchitNormalMultiBackward)$/;"	m
[%	.\level_editor\level_editor_session.vim	/^omap <silent> [% <Plug>(MatchitOperationMultiBackward)$/;"	m
[%	.\proto1_session.vim	/^nmap <silent> [% <Plug>(MatchitNormalMultiBackward)$/;"	m
[%	.\proto1_session.vim	/^omap <silent> [% <Plug>(MatchitOperationMultiBackward)$/;"	m
[[	.\level_editor\level_editor_session.vim	/^nnoremap <buffer> <silent> [[ m':call search('^\\s*fu\\%[nction]\\>', "bW")$/;"	m
[[	.\level_editor\level_editor_session.vim	/^vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\\s*fu\\%[nction]\\>', "bW")$/;"	m
[]	.\level_editor\level_editor_session.vim	/^nnoremap <buffer> <silent> [] m':call search('^\\s*endf\\%[unction]\\>', "bW")$/;"	m
[]	.\level_editor\level_editor_session.vim	/^vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\\s*endf\\%[unction]\\>', "bW")$/;"	m
]"	.\level_editor\level_editor_session.vim	/^nnoremap <buffer> <silent> ]" :call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")$/;"	m
]"	.\level_editor\level_editor_session.vim	/^vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")$/;"	m
]%	.\level_editor\level_editor_session.vim	/^nmap <silent> ]% <Plug>(MatchitNormalMultiForward)$/;"	m
]%	.\level_editor\level_editor_session.vim	/^omap <silent> ]% <Plug>(MatchitOperationMultiForward)$/;"	m
]%	.\proto1_session.vim	/^nmap <silent> ]% <Plug>(MatchitNormalMultiForward)$/;"	m
]%	.\proto1_session.vim	/^omap <silent> ]% <Plug>(MatchitOperationMultiForward)$/;"	m
][	.\level_editor\level_editor_session.vim	/^nnoremap <buffer> <silent> ][ m':call search('^\\s*endf\\%[unction]\\>', "W")$/;"	m
][	.\level_editor\level_editor_session.vim	/^vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\\s*endf\\%[unction]\\>', "W")$/;"	m
]]	.\level_editor\level_editor_session.vim	/^nnoremap <buffer> <silent> ]] m':call search('^\\s*fu\\%[nction]\\>', "W")$/;"	m
]]	.\level_editor\level_editor_session.vim	/^vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\\s*fu\\%[nction]\\>', "W")$/;"	m
_UNICODE	.\level_editor\olcConsoleGameEngine.h	113;"	d
_USE_MATH_DEFINES	.\level_editor\stdlibs.h	5;"	d
_USE_MATH_DEFINES	.\stdlibs.h	5;"	d
ax	.\level_editor\level_editor_main.cpp	/^    float ax, ay, bx, by;$/;"	m	struct:Wall	file:
ay	.\level_editor\level_editor_main.cpp	/^    float ax, ay, bx, by;$/;"	m	struct:Wall	file:
bFinished	.\level_editor\olcConsoleGameEngine.h	/^			bool bFinished = false;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
bHeld	.\level_editor\olcConsoleGameEngine.h	/^		bool bHeld;$/;"	m	struct:olcConsoleGameEngine::sKeyState
bLoop	.\level_editor\olcConsoleGameEngine.h	/^			bool bLoop = false;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
bPressed	.\level_editor\olcConsoleGameEngine.h	/^		bool bPressed;$/;"	m	struct:olcConsoleGameEngine::sKeyState
bReleased	.\level_editor\olcConsoleGameEngine.h	/^		bool bReleased;$/;"	m	struct:olcConsoleGameEngine::sKeyState
bSampleValid	.\level_editor\olcConsoleGameEngine.h	/^			bool bSampleValid = false;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
build_B1	.\builder.cpp	/^void Builder::build_B1(vector<Voxel> &vox) { $/;"	f	class:Builder
build_B2	.\builder.cpp	/^void Builder::build_B2(vector<Voxel> &vox) {$/;"	f	class:Builder
build_B3	.\builder.cpp	/^void Builder::build_B3(vector<Voxel> &vox) {$/;"	f	class:Builder
build_E1	.\builder.cpp	/^void Builder::build_E1(vector<Voxel> &vox) {$/;"	f	class:Builder
build_E2	.\builder.cpp	/^void Builder::build_E2(vector<Voxel> &vox) {$/;"	f	class:Builder
build_E3	.\builder.cpp	/^void Builder::build_E3(vector<Voxel> &vox) {$/;"	f	class:Builder
build_E4	.\builder.cpp	/^void Builder::build_E4(vector<Voxel> &vox) {$/;"	f	class:Builder
build_level	.\builder.cpp	/^void Builder::build_level(unsigned int & levelId) {$/;"	f	class:Builder
build_player	.\builder.cpp	/^void Builder::build_player(vector<Voxel> &vox) {$/;"	f	class:Builder
build_wall1	.\builder.cpp	/^void Builder::build_wall1(Vec2 start, Vec2 end, vector<Voxel> & vox) {$/;"	f	class:Builder
bx	.\level_editor\level_editor_main.cpp	/^    float ax, ay, bx, by;$/;"	m	struct:Wall	file:
by	.\level_editor\level_editor_main.cpp	/^    float ax, ay, bx, by;$/;"	m	struct:Wall	file:
calc_dist	.\builder.cpp	/^float Builder::calc_dist(const Vec2 & va,const Vec2 & vb) {$/;"	f	class:Builder
coll_mgr	.\proto1.cpp	/^    CollisionManager coll_mgr;$/;"	m	struct:Game	file:
collideWith	.\entity.cpp	/^void Bullet::collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) { $/;"	f	class:Bullet
collideWith	.\entity.cpp	/^void Enemy::collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) {$/;"	f	class:Enemy
collideWith	.\entity.cpp	/^void Entity::collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) {$/;"	f	class:Entity
collideWith	.\entity.cpp	/^void Player::collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) { $/;"	f	class:Player
collideWith	.\entity.cpp	/^void Wall1::collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) {$/;"	f	class:Wall1
collideWith	.\entity.cpp	/^void Wall2::collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) {$/;"	f	class:Wall2
color	.\voxel.h	/^  sf::Color color;$/;"	m	struct:Voxel
currPathPoint	.\entity.h	/^  unsigned int currPathPoint;$/;"	m	struct:EntityType::Enemy
destroyed	.\entity.h	/^  bool destroyed;$/;"	m	struct:EntityType::Entity
drawPhase	.\proto1.cpp	/^    void drawPhase() {$/;"	f	struct:Game
dvel	.\entity.h	/^  Vec2 dvel;$/;"	m	struct:EntityType::Entity
dvel	.\voxel.h	/^  Vec2 dvel;$/;"	m	struct:Voxel
entity	.\globals.h	/^  inline std::vector<std::shared_ptr<Entity>> entity;$/;"	v
entityCount	.\entity.cpp	/^size_t Entity::entityCount = 0;$/;"	m	class:Entity	file:
entityCount	.\entity.h	/^  static size_t entityCount; \/\/ defined in cpp file$/;"	m	struct:EntityType::Entity
eraseDeadVoxel	.\entity.cpp	/^void Entity::eraseDeadVoxel() {$/;"	f	class:Entity
fSample	.\level_editor\olcConsoleGameEngine.h	/^			float *fSample = nullptr;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
font_decode_custom_base64	.\level_editor\olcConsoleGameEngine.h	/^void font_decode_custom_base64(void)$/;"	f
free_voxels	.\globals.h	/^  inline std::vector<std::shared_ptr<Voxel>> free_voxels;$/;"	v
g%	.\level_editor\level_editor_session.vim	/^nmap <silent> g% <Plug>(MatchitNormalBackward)$/;"	m
g%	.\level_editor\level_editor_session.vim	/^omap <silent> g% <Plug>(MatchitOperationBackward)$/;"	m
g%	.\proto1_session.vim	/^nmap <silent> g% <Plug>(MatchitNormalBackward)$/;"	m
g%	.\proto1_session.vim	/^omap <silent> g% <Plug>(MatchitOperationBackward)$/;"	m
getCenter	.\entity.cpp	/^Vec2 Entity::getCenter() const {$/;"	f	class:Entity
getHealth	.\entity.cpp	/^size_t Entity::getHealth() const { return vox.size(); }$/;"	f	class:Entity
getId	.\entity.cpp	/^const size_t& Entity::getId() const { return id; }$/;"	f	class:Entity
getPos	.\entity.cpp	/^Vec2 Entity::getPos() const { return pos; }$/;"	f	class:Entity
getVox	.\entity.cpp	/^vector<Voxel>& Entity::getVox() { return vox; }$/;"	f	class:Entity
gx	.\level_editor\level_editor_session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	.\level_editor\level_editor_session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
gx	.\proto1_session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	.\proto1_session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
hasDeadVoxel	.\entity.h	/^  bool hasDeadVoxel;$/;"	m	struct:EntityType::Entity
health	.\voxel.h	/^  std::optional<int> health; \/\/ voxel health$/;"	m	struct:Voxel
id	.\entity.h	/^  size_t id; $/;"	m	struct:EntityType::Entity
inputPhase	.\proto1.cpp	/^    void inputPhase() {$/;"	f	struct:Game
input_timer	.\level_editor\level_editor_main.cpp	/^    float input_timer;$/;"	m	class:Example	file:
kPixelSize	.\level_editor\level_editor_main.cpp	/^constexpr float kPixelSize = 6.f;$/;"	v
kScreenHeight	.\level_editor\level_editor_main.cpp	/^constexpr float kScreenHeight = 3.f * kScreenWidth \/ 4.f;$/;"	v
kScreenWidth	.\level_editor\level_editor_main.cpp	/^constexpr float kScreenWidth = 1024.f;$/;"	v
layout	.\level_editor\level_editor_main.cpp	/^    const vector<string> layout = $/;"	m	class:Example	file:
listActiveSamples	.\level_editor\olcConsoleGameEngine.h	/^		std::list<sCurrentlyPlayingSample> listActiveSamples;$/;"	m	class:olcConsoleGameEngine
mCanShoot	.\entity.h	/^  bool mCanShoot;$/;"	m	struct:EntityType::Player
mTimer	.\entity.h	/^  float mTimer;$/;"	m	struct:EntityType::Player
mTimerMax	.\entity.h	/^  const float mTimerMax; \/\/ reload timer$/;"	m	struct:EntityType::Player
m_AudioThread	.\level_editor\olcConsoleGameEngine.h	/^		std::thread m_AudioThread;$/;"	m	class:olcConsoleGameEngine
m_ColourPalette	.\level_editor\olcConsoleGameEngine.h	/^	uint32_t m_ColourPalette[16] = \/\/ 0xAABBGGRR$/;"	m	class:olcConsoleGameEngine
m_Colours	.\level_editor\olcConsoleGameEngine.h	/^	short *m_Colours = nullptr;$/;"	m	class:olcSprite
m_Glyphs	.\level_editor\olcConsoleGameEngine.h	/^	wchar_t *m_Glyphs = nullptr;$/;"	m	class:olcSprite
m_bAtomActive	.\level_editor\olcConsoleGameEngine.h	/^	static atomic<bool> m_bAtomActive;$/;"	m	class:olcConsoleGameEngine
m_bAudioThreadActive	.\level_editor\olcConsoleGameEngine.h	/^		std::atomic<bool> m_bAudioThreadActive = false;$/;"	m	class:olcConsoleGameEngine
m_bConsoleInFocus	.\level_editor\olcConsoleGameEngine.h	/^	bool m_bConsoleInFocus = true;$/;"	m	class:olcConsoleGameEngine
m_bDoWindowUpdate	.\level_editor\olcConsoleGameEngine.h	/^	bool m_bDoWindowUpdate = false;$/;"	m	class:olcConsoleGameEngine
m_bEnableSound	.\level_editor\olcConsoleGameEngine.h	/^		bool m_bEnableSound = false;$/;"	m	class:olcConsoleGameEngine
m_bufMemory	.\level_editor\olcConsoleGameEngine.h	/^	uint8_t *m_bufMemory;$/;"	m	class:olcConsoleGameEngine
m_bufScreen	.\level_editor\olcConsoleGameEngine.h	/^	CHAR_INFO *m_bufScreen;$/;"	m	class:olcConsoleGameEngine
m_bufScreen_old	.\level_editor\olcConsoleGameEngine.h	/^	CHAR_INFO *m_bufScreen_old;$/;"	m	class:olcConsoleGameEngine
m_cvBlockNotZero	.\level_editor\olcConsoleGameEngine.h	/^		std::condition_variable m_cvBlockNotZero;$/;"	m	class:olcConsoleGameEngine
m_cvGameFinished	.\level_editor\olcConsoleGameEngine.h	/^	static condition_variable m_cvGameFinished;$/;"	m	class:olcConsoleGameEngine
m_cvGameFinished	.\level_editor\olcConsoleGameEngine.h	/^condition_variable olcConsoleGameEngine::m_cvGameFinished;$/;"	m	class:olcConsoleGameEngine
m_fDrawOffsetX	.\level_editor\olcConsoleGameEngine.h	/^	float m_fDrawOffsetX;$/;"	m	class:olcConsoleGameEngine
m_fDrawOffsetY	.\level_editor\olcConsoleGameEngine.h	/^	float m_fDrawOffsetY;$/;"	m	class:olcConsoleGameEngine
m_fDrawScale	.\level_editor\olcConsoleGameEngine.h	/^	float m_fDrawScale;$/;"	m	class:olcConsoleGameEngine
m_fGlobalTime	.\level_editor\olcConsoleGameEngine.h	/^		std::atomic<float> m_fGlobalTime = 0.0f;$/;"	m	class:olcConsoleGameEngine
m_fTexCoordArray	.\level_editor\olcConsoleGameEngine.h	/^	float *m_fTexCoordArray;$/;"	m	class:olcConsoleGameEngine
m_fVertexArray	.\level_editor\olcConsoleGameEngine.h	/^	float *m_fVertexArray;$/;"	m	class:olcConsoleGameEngine
m_hConsole	.\level_editor\olcConsoleGameEngine.h	/^	HWND  m_hConsole = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hDevCtx	.\level_editor\olcConsoleGameEngine.h	/^	HDC   m_hDevCtx = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hRenCtx	.\level_editor\olcConsoleGameEngine.h	/^	HGLRC m_hRenCtx = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hWnd	.\level_editor\olcConsoleGameEngine.h	/^	HWND  m_hWnd = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hwDevice	.\level_editor\olcConsoleGameEngine.h	/^		HWAVEOUT m_hwDevice = nullptr;$/;"	m	class:olcConsoleGameEngine
m_keyNewState	.\level_editor\olcConsoleGameEngine.h	/^	short m_keyNewState[256] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_keyOldState	.\level_editor\olcConsoleGameEngine.h	/^	short m_keyOldState[256] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_keys	.\level_editor\olcConsoleGameEngine.h	/^	} m_keys[256], m_mouse[5];$/;"	m	class:olcConsoleGameEngine	typeref:struct:olcConsoleGameEngine::sKeyState
m_mouse	.\level_editor\olcConsoleGameEngine.h	/^	} m_keys[256], m_mouse[5];$/;"	m	class:olcConsoleGameEngine	typeref:struct:olcConsoleGameEngine::sKeyState
m_mouseNewState	.\level_editor\olcConsoleGameEngine.h	/^	bool m_mouseNewState[5] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_mouseOldState	.\level_editor\olcConsoleGameEngine.h	/^	bool m_mouseOldState[5] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_mousePosX	.\level_editor\olcConsoleGameEngine.h	/^	int m_mousePosX;$/;"	m	class:olcConsoleGameEngine
m_mousePosY	.\level_editor\olcConsoleGameEngine.h	/^	int m_mousePosY;$/;"	m	class:olcConsoleGameEngine
m_muxBlockNotZero	.\level_editor\olcConsoleGameEngine.h	/^		std::mutex m_muxBlockNotZero;$/;"	m	class:olcConsoleGameEngine
m_muxGame	.\level_editor\olcConsoleGameEngine.h	/^	static mutex m_muxGame;$/;"	m	class:olcConsoleGameEngine
m_muxGame	.\level_editor\olcConsoleGameEngine.h	/^mutex olcConsoleGameEngine::m_muxGame;/;"	m	class:olcConsoleGameEngine
m_nBlockCount	.\level_editor\olcConsoleGameEngine.h	/^		unsigned int m_nBlockCount;$/;"	m	class:olcConsoleGameEngine
m_nBlockCurrent	.\level_editor\olcConsoleGameEngine.h	/^		unsigned int m_nBlockCurrent;$/;"	m	class:olcConsoleGameEngine
m_nBlockFree	.\level_editor\olcConsoleGameEngine.h	/^		std::atomic<unsigned int> m_nBlockFree = 0;$/;"	m	class:olcConsoleGameEngine
m_nBlockSamples	.\level_editor\olcConsoleGameEngine.h	/^		unsigned int m_nBlockSamples;$/;"	m	class:olcConsoleGameEngine
m_nChannels	.\level_editor\olcConsoleGameEngine.h	/^		unsigned int m_nChannels;$/;"	m	class:olcConsoleGameEngine
m_nFontHeight	.\level_editor\olcConsoleGameEngine.h	/^	int m_nFontHeight;$/;"	m	class:olcConsoleGameEngine
m_nFontWidth	.\level_editor\olcConsoleGameEngine.h	/^	int m_nFontWidth;$/;"	m	class:olcConsoleGameEngine
m_nSampleRate	.\level_editor\olcConsoleGameEngine.h	/^		unsigned int m_nSampleRate;$/;"	m	class:olcConsoleGameEngine
m_nScreenHeight	.\level_editor\olcConsoleGameEngine.h	/^	int m_nScreenHeight;$/;"	m	class:olcConsoleGameEngine
m_nScreenWidth	.\level_editor\olcConsoleGameEngine.h	/^	int m_nScreenWidth;$/;"	m	class:olcConsoleGameEngine
m_nWindowHeight	.\level_editor\olcConsoleGameEngine.h	/^	int m_nWindowHeight;$/;"	m	class:olcConsoleGameEngine
m_nWindowWidth	.\level_editor\olcConsoleGameEngine.h	/^	int m_nWindowWidth;$/;"	m	class:olcConsoleGameEngine
m_pBlockMemory	.\level_editor\olcConsoleGameEngine.h	/^		short* m_pBlockMemory = nullptr;$/;"	m	class:olcConsoleGameEngine
m_pWaveHeaders	.\level_editor\olcConsoleGameEngine.h	/^		WAVEHDR *m_pWaveHeaders = nullptr;$/;"	m	class:olcConsoleGameEngine
m_rectWindow	.\level_editor\olcConsoleGameEngine.h	/^	SMALL_RECT m_rectWindow;$/;"	m	class:olcConsoleGameEngine
m_sAppName	.\level_editor\olcConsoleGameEngine.h	/^	wstring m_sAppName;$/;"	m	class:olcConsoleGameEngine
m_uBackgroundColorArray	.\level_editor\olcConsoleGameEngine.h	/^	uint32_t *m_uBackgroundColorArray;$/;"	m	class:olcConsoleGameEngine
m_uFontTexture	.\level_editor\olcConsoleGameEngine.h	/^	GLuint m_uFontTexture;$/;"	m	class:olcConsoleGameEngine
m_uForegroundColorArray	.\level_editor\olcConsoleGameEngine.h	/^	uint32_t *m_uForegroundColorArray;$/;"	m	class:olcConsoleGameEngine
m_uIndicesArray	.\level_editor\olcConsoleGameEngine.h	/^	uint32_t *m_uIndicesArray;$/;"	m	class:olcConsoleGameEngine
main	.\ascii_art_to_code\art_loader.cpp	/^int main() {$/;"	f
main	.\level_editor\level_editor_main.cpp	/^int main()$/;"	f
main	.\proto1.cpp	/^int main()$/;"	f
move	.\entity.cpp	/^void Entity::move(Vec2 offset) { $/;"	f	class:Entity
nAudioSampleID	.\level_editor\olcConsoleGameEngine.h	/^			int nAudioSampleID = 0;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
nChannels	.\level_editor\olcConsoleGameEngine.h	/^			int nChannels = 0;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
nHeight	.\level_editor\olcConsoleGameEngine.h	/^	int nHeight = 0;$/;"	m	class:olcSprite
nSamplePosition	.\level_editor\olcConsoleGameEngine.h	/^			long nSamplePosition = 0;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
nSamples	.\level_editor\olcConsoleGameEngine.h	/^			long nSamples = 0;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
nWidth	.\level_editor\olcConsoleGameEngine.h	/^	int nWidth = 0;$/;"	m	class:olcSprite
o_type	.\entity.h	/^  EntityType o_type;$/;"	m	struct:EntityType::Entity
olcAudioSample	.\level_editor\olcConsoleGameEngine.h	/^			olcAudioSample()$/;"	f	class:olcConsoleGameEngine::olcAudioSample
olcAudioSample	.\level_editor\olcConsoleGameEngine.h	/^			olcAudioSample(std::wstring sWavFile)$/;"	f	class:olcConsoleGameEngine::olcAudioSample
olcAudioSample	.\level_editor\olcConsoleGameEngine.h	/^		class olcAudioSample$/;"	c	class:olcConsoleGameEngine
olcConsoleGameEngine	.\level_editor\olcConsoleGameEngine.h	/^	olcConsoleGameEngine()$/;"	f	class:olcConsoleGameEngine
olcConsoleGameEngine	.\level_editor\olcConsoleGameEngine.h	/^class olcConsoleGameEngine$/;"	c
olcSprite	.\level_editor\olcConsoleGameEngine.h	/^	olcSprite()$/;"	f	class:olcSprite
olcSprite	.\level_editor\olcConsoleGameEngine.h	/^	olcSprite(int w, int h)$/;"	f	class:olcSprite
olcSprite	.\level_editor\olcConsoleGameEngine.h	/^	olcSprite(wstring sFile)$/;"	f	class:olcSprite
olcSprite	.\level_editor\olcConsoleGameEngine.h	/^class olcSprite$/;"	c
olcWndProc	.\level_editor\olcConsoleGameEngine.h	/^		LRESULT CALLBACK olcWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)$/;"	f	class:olcConsoleGameEngine
onUserSoundFilter	.\level_editor\olcConsoleGameEngine.h	/^		virtual float onUserSoundFilter(int nChannel, float fGlobalTime, float fSample)$/;"	f	class:olcConsoleGameEngine
onUserSoundSample	.\level_editor\olcConsoleGameEngine.h	/^		virtual float onUserSoundSample(int nChannel, float fGlobalTime, float fTimeStep)$/;"	f	class:olcConsoleGameEngine
origin	.\entity.h	/^  Vec2 origin; \/\/ add this to pos when returning the center of the entity$/;"	m	struct:EntityType::Entity
out_file	.\level_editor\level_editor_main.cpp	/^    fstream out_file;$/;"	m	class:Example	file:
override	.\entity.h	/^    virtual void collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) override;$/;"	m	struct:EntityType::Wall1
override	.\entity.h	/^    virtual void collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) override;$/;"	m	struct:EntityType::Wall2
override	.\entity.h	/^    virtual void update(FrameTime ftStep) override; \/\/ test for collision $/;"	m	struct:EntityType::Wall1
override	.\entity.h	/^    virtual void update(FrameTime ftStep) override; \/\/ test for collision $/;"	m	struct:EntityType::Wall2
override	.\entity.h	/^  virtual void collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) override;$/;"	m	struct:EntityType::Bullet
override	.\entity.h	/^  virtual void collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) override;$/;"	m	struct:EntityType::Enemy
override	.\entity.h	/^  virtual void collideWith(Entity& e, unsigned int ivox, Vec2 voxPos) override;$/;"	m	struct:EntityType::Player
override	.\entity.h	/^  virtual void update(FrameTime ftStep) override;  $/;"	m	struct:EntityType::Bullet
override	.\entity.h	/^  virtual void update(FrameTime ftStep) override;$/;"	m	struct:EntityType::Enemy
override	.\entity.h	/^  virtual void update(FrameTime ftStep) override;$/;"	m	struct:EntityType::Player
path	.\entity.h	/^  std::vector<Vec2> path;$/;"	m	struct:EntityType::Enemy
path	.\level_editor\level_editor_main.cpp	/^    vector<pair<int,int>> path; $/;"	m	class:Example	file:
pos	.\entity.h	/^  Vec2 pos; \/\/ overall position of entity$/;"	m	struct:EntityType::Entity
pxplus_ibm_cga	.\level_editor\olcConsoleGameEngine.h	/^unsigned char pxplus_ibm_cga[65536];$/;"	v
pxplus_ibm_cga_enc	.\level_editor\olcConsoleGameEngine.h	/^char pxplus_ibm_cga_enc[8509 + 1] =$/;"	v
removeDestroyedEntities	.\proto1.cpp	/^    static void removeDestroyedEntities(vector<shared_ptr<Entity>> & vec) {$/;"	f	struct:Game
resetOrigin	.\entity.cpp	/^void Entity::resetOrigin() {$/;"	f	class:Entity
s:cpo_save	.\level_editor\level_editor_session.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	.\proto1_session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	.\level_editor\level_editor_session.vim	/^let s:l = 1 - ((0 * winheight(0) + 20) \/ 40)$/;"	v
s:l	.\level_editor\level_editor_session.vim	/^let s:l = 30 - ((29 * winheight(0) + 20) \/ 40)$/;"	v
s:l	.\proto1_session.vim	/^let s:l = 19 - ((18 * winheight(0) + 27) \/ 55)$/;"	v
s:l	.\proto1_session.vim	/^let s:l = 44 - ((43 * winheight(0) + 27) \/ 55)$/;"	v
s:l	.\proto1_session.vim	/^let s:l = 7 - ((6 * winheight(0) + 27) \/ 55)$/;"	v
s:so_save	.\level_editor\level_editor_session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:so_save	.\proto1_session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	.\level_editor\level_editor_session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:sx	.\proto1_session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	.\level_editor\level_editor_session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:wipebuf	.\proto1_session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
sCurrentlyPlayingSample	.\level_editor\olcConsoleGameEngine.h	/^		struct sCurrentlyPlayingSample$/;"	s	class:olcConsoleGameEngine
sKeyState	.\level_editor\olcConsoleGameEngine.h	/^	struct sKeyState$/;"	s	class:olcConsoleGameEngine
setPos	.\entity.cpp	/^void Entity::setPos(Vec2 pos) {$/;"	f	class:Entity
setVoxelHealth	.\entity.cpp	/^void Entity::setVoxelHealth(Entity & e, optional<unsigned int> health) { $/;"	f	class:Entity
update	.\entity.cpp	/^void Bullet::update(FrameTime ftStep){ $/;"	f	class:Bullet
update	.\entity.cpp	/^void Enemy::update(FrameTime ftStep) {$/;"	f	class:Enemy
update	.\entity.cpp	/^void Entity::update(FrameTime ftStep) { \/* check for collision *\/ \/* update pos *\/  }$/;"	f	class:Entity
update	.\entity.cpp	/^void Player::update(FrameTime ftStep) {$/;"	f	class:Player
update	.\entity.cpp	/^void Wall1::update(FrameTime ftStep) {$/;"	f	class:Wall1
update	.\entity.cpp	/^void Wall2::update(FrameTime ftStep) {$/;"	f	class:Wall2
updateCounter	.\proto1.cpp	/^    int updateCounter = 0;$/;"	m	struct:Game	file:
updatePhase	.\proto1.cpp	/^    void updatePhase() {$/;"	f	struct:Game
vecAudioSamples	.\level_editor\olcConsoleGameEngine.h	/^		std::vector<olcAudioSample> vecAudioSamples;$/;"	m	class:olcConsoleGameEngine
vel	.\entity.h	/^  Vec2 vel;    $/;"	m	struct:EntityType::Bullet
vel	.\entity.h	/^  Vec2 vel;$/;"	m	struct:EntityType::Entity
vel	.\voxel.h	/^  Vec2 vel;$/;"	m	struct:Voxel
vox	.\entity.h	/^  std::vector<Voxel> vox;$/;"	m	struct:EntityType::Entity
wall1	.\level_editor\level_editor_main.cpp	/^    Wall wall1, wall2;$/;"	m	class:Example	file:
wall2	.\level_editor\level_editor_main.cpp	/^    Wall wall1, wall2;$/;"	m	class:Example	file:
walls	.\level_editor\level_editor_main.cpp	/^    const vector<Wall> walls = { {0.1, 0.2, 0.9, 0.2} };$/;"	m	class:Example	file:
wavHeader	.\level_editor\olcConsoleGameEngine.h	/^			WAVEFORMATEX wavHeader;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
waveOutProc	.\level_editor\olcConsoleGameEngine.h	/^		void waveOutProc(HWAVEOUT hWaveOut, UINT uMsg, DWORD dwParam1, DWORD dwParam2)$/;"	f	class:olcConsoleGameEngine
waveOutProcWrap	.\level_editor\olcConsoleGameEngine.h	/^		static void CALLBACK waveOutProcWrap(HWAVEOUT hWaveOut, UINT uMsg, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2)$/;"	f	class:olcConsoleGameEngine
wglSwapInterval	.\level_editor\olcConsoleGameEngine.h	/^wglSwapInterval_t *wglSwapInterval;$/;"	v
wglSwapInterval_t	.\level_editor\olcConsoleGameEngine.h	/^typedef BOOL(WINAPI wglSwapInterval_t) (int interval);$/;"	t
withId	.\entity.cpp	/^shared_ptr<Entity> Entity::withId(size_t id) {$/;"	f	class:Entity
zt	.\level_editor\level_editor_session.vim	/^normal! zt$/;"	m
zt	.\proto1_session.vim	/^normal! zt$/;"	m
~Entity	.\entity.cpp	/^Entity::~Entity() { }  $/;"	f	class:Entity
~olcConsoleGameEngine	.\level_editor\olcConsoleGameEngine.h	/^	~olcConsoleGameEngine()$/;"	f	class:olcConsoleGameEngine
