B1	proto1.cpp~	92
B1	proto1.cpp~	/^    B1(Vec2 pos) : Bullet({0.f,-1.f}) {$/
B1	entity.h	81
B1::B1	entity.cpp	/^B1::B1(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) /
B1::B1	entity.cpp~	/^B1::B1(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) /
B2	proto1.cpp~	103
B2	proto1.cpp~	/^    B2(Vec2 pos) : Bullet({0.f,-1.f}) {$/
B2	entity.h	85
B2::B2	entity.cpp	/^B2::B2(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) /
B2::B2	entity.cpp~	/^B2::B2(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) /
B3	entity.h	89
B3::B3	entity.cpp	/^B3::B3(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) /
B3::B3	entity.cpp~	/^B3::B3(Vec2 pos) : Bullet({0.f,-G::kBulletSpeed}) /
Bullet	proto1.cpp~	84
Bullet	proto1.cpp~	/^    Bullet(Vec2 vv) : vel{vv} {}$/
Bullet	entity.h	12
Bullet	entity.h	75
Bullet::Bullet	entity.cpp	/^Bullet::Bullet(Vec2 vv) : vel{vv} {$/
Bullet::Bullet	entity.cpp~	/^Bullet::Bullet(Vec2 vv) : vel{vv} {$/
CheckCollisionsForThisFrame	collision_manager.cpp	/^void CollisionManager::CheckCollisionsForThisFrame/
CheckCollisionsForThisFrame	collision_manager.cpp~	/^void CollisionManager::CheckCollisionsForThisFrame/
CheckCollisionsForThisFrame	collision_manager.h	/^    void CheckCollisionsForThisFrame();$/
CollisionManager	collision_manager.cpp	/^CollisionManager::CollisionManager() { cout << "In/
CollisionManager	collision_manager.cpp~	/^CollisionManager::CollisionManager() { cout << "In/
CollisionManager	collision_manager.h	8
CollisionManager	collision_manager.h	/^    CollisionManager();$/
E1	proto1.cpp~	134
E1	proto1.cpp~	/^    E1(Vec2 pos) {$/
E1	entity.h	109
E1::E1	entity.cpp	/^E1::E1(Vec2 pos) : Enemy() {$/
E1::E1	entity.cpp~	/^E1::E1(Vec2 pos) : Enemy() {$/
E2	proto1.cpp~	193
E2	proto1.cpp~	/^    E2(Vec2 pos) {$/
E2	entity.h	113
E2::E2	entity.cpp	/^E2::E2(Vec2 pos) : Enemy() {$/
E2::E2	entity.cpp~	/^E2::E2(Vec2 pos) : Enemy() {$/
E3	proto1.cpp~	272
E3	proto1.cpp~	/^    E3(Vec2 pos) {$/
E3	entity.h	117
E3::E3	entity.cpp	/^E3::E3(Vec2 pos) : Enemy() {$/
E3::E3	entity.cpp~	/^E3::E3(Vec2 pos) : Enemy() {$/
E4	proto1.cpp~	353
E4	proto1.cpp~	/^    E4(Vec2 pos) {$/
E4	entity.h	121
E4::E4	entity.cpp	/^E4::E4(Vec2 pos) : Enemy() {$/
E4::E4	entity.cpp~	/^E4::E4(Vec2 pos) : Enemy() {$/
Enemy	proto1.cpp~	130
Enemy	entity.h	12
Enemy	entity.h	102
Enemy::Enemy	entity.cpp	/^Enemy::Enemy() : currPathPoint{0} {$/
Enemy::Enemy	entity.cpp~	/^Enemy::Enemy() : currPathPoint{0} {$/
Entity	proto1.cpp~	35
Entity	proto1.cpp~	/^    Entity() : id{entityCount++} {}$/
Entity	entity.h	16
Entity::Entity	entity.cpp	/^Entity::Entity() : id{entityCount++}, destroyed{fa/
Entity::Entity	entity.cpp~	/^Entity::Entity() : id{entityCount++}, destroyed{fa/
Entity::entityCount	entity.cpp	77
Entity::entityCount	entity.cpp~	77
Entity::entityCount	proto1.cpp~	81
EntityType	entity.h	12
FrameTime	proto1.cpp	12
FrameTime	proto1.cpp~	8
FrameTime	entity.h	8
Game	proto1.cpp	18
Game	proto1.cpp	/^    Game() {$/
Game	proto1.cpp~	498
Game	proto1.cpp~	/^    Game() {$/
HandleCollisionsForThisFrame	collision_manager.cpp	/^void CollisionManager::HandleCollisionsForThisFram/
HandleCollisionsForThisFrame	collision_manager.cpp~	/^void CollisionManager::HandleCollisionsForThisFram/
HandleCollisionsForThisFrame	collision_manager.h	/^    void HandleCollisionsForThisFrame();$/
Mbind_biggies.cpp	bind_biggies.cpp	/^int main() { $/
Mproto1.cpp	proto1.cpp	/^int main()$/
Mproto1.cpp~	proto1.cpp~	/^int main()$/
Player	proto1.cpp~	119
Player	proto1.cpp~	/^    Player(Vec2 pos) {$/
Player	entity.h	12
Player	entity.h	93
Player::Player	entity.cpp	/^Player::Player(Vec2 pos) : mTimerMax{75.f}, mTimer/
Player::Player	entity.cpp~	/^Player::Player(Vec2 pos) : mTimerMax{75.f}, mTimer/
Run	proto1.cpp	/^    void Run() {$/
Run	proto1.cpp~	/^    void Run() {$/
Vec2	builder.cpp	8
Vec2	entity.cpp	7
Vec2	entity.cpp~	7
Vec2	proto1.cpp	11
Vec2	proto1.cpp~	7
Vec2	entity.h	7
Vec2	voxel.h	4
Voxel	proto1.cpp~	22
Voxel	proto1.cpp~	/^    Voxel(float mX, float mY, Color c = Color::Whi/
Voxel	voxel.cpp	/^Voxel::Voxel(float mX, float mY, Color c) {$/
Voxel	voxel.h	6
Wall	proto1.cpp~	477
Wall	entity.h	126
Wall1	entity.cpp	/^Wall1::Wall1(Vec2 start, Vec2 end) {$/
Wall1	entity.cpp~	/^Wall1::Wall1(Vec2 start, Vec2 end) {$/
Wall1	proto1.cpp~	479
Wall1	entity.h	12
Wall1	entity.h	129
Wall2	proto1.cpp~	481
Wall2	entity.h	12
Wall2	entity.h	134
_USE_MATH_DEFINES	stdlibs.h	5
biggies	bind_biggies.cpp	/^void biggies(vector<string> &words, vector<string>/
build_B1	builder.cpp	/^void Builder::build_B1(vector<Voxel> &vox) { $/
build_B2	builder.cpp	/^void Builder::build_B2(vector<Voxel> &vox) {$/
build_B3	builder.cpp	/^void Builder::build_B3(vector<Voxel> &vox) {$/
build_E1	builder.cpp	/^void Builder::build_E1(vector<Voxel> &vox) {$/
build_E2	builder.cpp	/^void Builder::build_E2(vector<Voxel> &vox) {$/
build_E3	builder.cpp	/^void Builder::build_E3(vector<Voxel> &vox) {$/
build_E4	builder.cpp	/^void Builder::build_E4(vector<Voxel> &vox) {$/
build_level	builder.cpp	/^void Builder::build_level(unsigned int & levelId) /
build_player	builder.cpp	/^void Builder::build_player(vector<Voxel> &vox) {$/
build_wall1	builder.cpp	/^void Builder::build_wall1(Vec2 start, Vec2 end, ve/
calc_dist	builder.cpp	/^float Builder::calc_dist(const Vec2 & va,const Vec/
check_size	bind_biggies.cpp	/^bool check_size(const string &s, string::size_type/
coll_mgr	proto1.cpp	24
collideWith	entity.cpp	/^void Entity::collideWith(EntityType et, unsigned i/
collideWith	entity.cpp	/^void Bullet::collideWith(EntityType et, unsigned i/
collideWith	entity.cpp	/^void Player::collideWith(EntityType et, unsigned i/
collideWith	entity.cpp	/^void Enemy::collideWith(EntityType et, unsigned in/
collideWith	entity.cpp	/^void Wall1::collideWith(EntityType et, unsigned in/
collideWith	entity.cpp	/^void Wall2::collideWith(EntityType et, unsigned in/
collideWith	entity.cpp~	/^void Entity::collideWith(EntityType et, unsigned i/
collideWith	entity.cpp~	/^void Bullet::collideWith(EntityType et, unsigned i/
collideWith	entity.cpp~	/^void Player::collideWith(EntityType et, unsigned i/
collideWith	entity.cpp~	/^void Enemy::collideWith(EntityType et, unsigned in/
collideWith	entity.cpp~	/^void Wall1::collideWith(EntityType et, unsigned in/
collideWith	entity.cpp~	/^void Wall2::collideWith(EntityType et, unsigned in/
color	proto1.cpp~	31
color	voxel.h	10
currPathPoint	entity.h	106
destroyed	entity.h	62
destructVoxel	entity.cpp	/^void Entity::destructVoxel(unsigned int voxIndex) /
destructVoxel	entity.cpp~	/^void Entity::destructVoxel(unsigned int voxIndex) /
draw	proto1.cpp~	/^    virtual void draw() { }$/
drawPhase	proto1.cpp	/^    void drawPhase() {$/
drawPhase	proto1.cpp~	/^    void drawPhase() {$/
elimDups	bind_biggies.cpp	/^void elimDups(vector<string> &words)$/
entity	proto1.cpp~	18
entityCount	proto1.cpp~	76
entityCount	entity.h	71
gameOver	proto1.cpp	23
gameOver	proto1.cpp~	503
getHealth	entity.cpp	/^size_t Entity::getHealth() const { return vox.size/
getHealth	entity.cpp~	/^size_t Entity::getHealth() const { return vox.size/
getHealth	proto1.cpp~	/^    virtual size_t getHealth() const { return vox./
getId	entity.cpp	/^const size_t& Entity::getId() const { return id; }/
getId	entity.cpp~	/^const size_t& Entity::getId() const { return id; }/
getId	proto1.cpp~	/^    const size_t& getId() const { return id; }$/
getPos	entity.cpp	/^Vec2& Entity::getPos() { return pos; }$/
getPos	entity.cpp~	/^Vec2& Entity::getPos() { return pos; }$/
getPos	proto1.cpp~	/^    Vec2& getPos() { return pos; }$/
getVox	entity.cpp	/^vector<Voxel>& Entity::getVox() { return vox; }$/
getVox	entity.cpp~	/^vector<Voxel>& Entity::getVox() { return vox; }$/
getVox	proto1.cpp~	/^    vector<Voxel>& getVox() { return vox; }$/
health	proto1.cpp~	32
health	voxel.h	11
id	proto1.cpp~	78
id	entity.h	68
inputPhase	proto1.cpp	/^    void inputPhase() {$/
inputPhase	proto1.cpp~	/^    void inputPhase() {$/
isIntersecting	proto1.cpp~	/^template<class T1, class T2> bool isIntersecting(T/
levelId	proto1.cpp~	506
mCanShoot	entity.cpp	123
mCanShoot	entity.cpp~	123
mCanShoot	entity.h	96
mTimer	entity.h	97
mTimerMax	entity.h	98
make_plural	bind_biggies.cpp	/^string make_plural(size_t ctr, const string &word,/
move	entity.cpp	/^void Entity::move(Vec2 offset) { $/
move	entity.cpp~	/^void Entity::move(Vec2 offset) { $/
move	proto1.cpp~	/^    virtual void move(Vec2 offset) { $/
o_type	entity.cpp	81
o_type	entity.cpp	146
o_type	entity.cpp~	81
o_type	entity.cpp~	146
o_type	entity.h	69
path	proto1.cpp~	131
path	entity.h	105
pause	proto1.cpp~	503
pos	proto1.cpp~	75
pos	entity.h	66
removeDestroyedEntities	proto1.cpp	/^    static void removeDestroyedEntities(vector<sha/
screenHeight	proto1.cpp~	13
screenWidth	proto1.cpp~	13
setPos	entity.cpp	/^void Entity::setPos(Vec2 pos) {$/
setPos	entity.cpp~	/^void Entity::setPos(Vec2 pos) {$/
setPos	proto1.cpp~	/^    void setPos(Vec2 pos) {$/
setVoxelHealth	entity.cpp	/^void Entity::setVoxelHealth(Entity & e, optional<u/
setVoxelHealth	entity.cpp~	/^void Entity::setVoxelHealth(Entity & e, optional<u/
sf	collision_manager.cpp~	8
sf	entity.cpp~	6
sf	proto1.cpp~	6
std	collision_manager.cpp~	7
std	entity.cpp~	5
std	proto1.cpp~	5
testCollision	proto1.cpp~	/^void testCollision(Entity &e1, Entity &e2) {$/
this	entity.cpp	108
this	entity.cpp	114
this	entity.cpp~	108
this	entity.cpp~	114
update	entity.cpp	/^void Entity::update(FrameTime ftStep) { \/* check f/
update	entity.cpp	/^void Bullet::update(FrameTime ftStep){ $/
update	entity.cpp	/^void Player::update(FrameTime ftStep) {$/
update	entity.cpp	/^void Enemy::update(FrameTime ftStep) {$/
update	entity.cpp	/^void Wall1::update(FrameTime ftStep) {$/
update	entity.cpp	/^void Wall2::update(FrameTime ftStep) {$/
update	entity.cpp~	/^void Entity::update(FrameTime ftStep) { \/* check f/
update	entity.cpp~	/^void Bullet::update(FrameTime ftStep){ $/
update	entity.cpp~	/^void Player::update(FrameTime ftStep) {$/
update	entity.cpp~	/^void Enemy::update(FrameTime ftStep) {$/
update	entity.cpp~	/^void Wall1::update(FrameTime ftStep) {$/
update	entity.cpp~	/^void Wall2::update(FrameTime ftStep) {$/
update	proto1.cpp~	/^    virtual void update(FrameTime ftStep) { \/* che/
update	proto1.cpp~	/^    virtual void update(FrameTime ftStep) override/
updateCounter	proto1.cpp	25
updatePhase	proto1.cpp	/^    void updatePhase() {$/
updatePhase	proto1.cpp~	/^    void updatePhase() {$/
vel	proto1.cpp~	/^    Voxel(float mX, float mY, Color c = Color::Whi/
vel	proto1.cpp~	30
vel	proto1.cpp~	73
vel	proto1.cpp~	86
vel	entity.h	65
vel	entity.h	77
vel	voxel.h	9
vox	proto1.cpp~	72
vox	entity.h	64
window	proto1.cpp	20
window	proto1.cpp~	500
withId	entity.cpp	/^shared_ptr<Entity> Entity::withId(size_t id) {$/
withId	entity.cpp~	/^shared_ptr<Entity> Entity::withId(size_t id) {$/
withId	proto1.cpp~	/^    static shared_ptr<Entity> withId(size_t id) {$/
~Entity	entity.cpp	/^Entity::~Entity() { }  $/
~Entity	entity.cpp~	/^Entity::~Entity() { }  $/
~Entity	proto1.cpp~	/^    virtual ~Entity() { }  $/
